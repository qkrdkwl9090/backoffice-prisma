/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { iContext } from "./api/context"


declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Query: {};
  company: { // root type
    domain: string; // String!
    id: number; // Int!
    name: string; // String!
  }
  employee: { // root type
    birthday: string; // String!
    companyId: number; // Int!
    email: string; // String!
    id: number; // Int!
    name: string; // String!
    saleCount: number; // Int!
    teamId: number; // Int!
  }
  product: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    name: string; // String!
  }
  sales: { // root type
    employeeId: number; // Int!
    id: number; // Int!
    productId: number; // Int!
  }
  team: { // root type
    id: number; // Int!
    name: string; // String!
  }
  user: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: number; // Int!
    name: string; // String!
    password: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    company: Array<NexusGenRootTypes['company'] | null> | null; // [company]
    employee: Array<NexusGenRootTypes['employee'] | null> | null; // [employee]
    product: Array<NexusGenRootTypes['product'] | null> | null; // [product]
    sales: Array<NexusGenRootTypes['sales'] | null> | null; // [sales]
    team: Array<NexusGenRootTypes['team'] | null> | null; // [team]
    user: Array<NexusGenRootTypes['user'] | null> | null; // [user]
  }
  company: { // field return type
    domain: string; // String!
    id: number; // Int!
    name: string; // String!
  }
  employee: { // field return type
    birthday: string; // String!
    companyId: number; // Int!
    email: string; // String!
    id: number; // Int!
    name: string; // String!
    saleCount: number; // Int!
    teamId: number; // Int!
  }
  product: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    name: string; // String!
  }
  sales: { // field return type
    employeeId: number; // Int!
    id: number; // Int!
    productId: number; // Int!
  }
  team: { // field return type
    id: number; // Int!
    name: string; // String!
  }
  user: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: number; // Int!
    name: string; // String!
    password: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    company: 'company'
    employee: 'employee'
    product: 'product'
    sales: 'sales'
    team: 'team'
    user: 'user'
  }
  company: { // field return type name
    domain: 'String'
    id: 'Int'
    name: 'String'
  }
  employee: { // field return type name
    birthday: 'String'
    companyId: 'Int'
    email: 'String'
    id: 'Int'
    name: 'String'
    saleCount: 'Int'
    teamId: 'Int'
  }
  product: { // field return type name
    createdAt: 'DateTime'
    id: 'Int'
    name: 'String'
  }
  sales: { // field return type name
    employeeId: 'Int'
    id: 'Int'
    productId: 'Int'
  }
  team: { // field return type name
    id: 'Int'
    name: 'String'
  }
  user: { // field return type name
    createdAt: 'DateTime'
    email: 'String'
    id: 'Int'
    name: 'String'
    password: 'String'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Query: {
    company: { // args
      id?: number | null; // Int
      name?: string | null; // String
    }
    employee: { // args
      companyId?: number | null; // Int
      id?: number | null; // Int
      teamId?: number | null; // Int
    }
    product: { // args
      id?: number | null; // Int
      name?: string | null; // String
    }
    sales: { // args
      employeeId?: number | null; // Int
      id?: number | null; // Int
      productId?: number | null; // Int
    }
    team: { // args
      id?: number | null; // Int
      name?: string | null; // String
    }
    user: { // args
      email?: string | null; // String
      id?: number | null; // Int
      name?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: iContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}